#!/usr/bin/env python3

import argparse
import logging

import clockwork

parser = argparse.ArgumentParser(
    prog="clockwork",
    usage="clockwork <tasks> <options>",
    description="script to run clockwork helper tasks",
)
subparsers = parser.add_subparsers(
    title="Available tasks", help="", metavar="", dest="subparser_name"
)

# ---------------------- remove_contam --------------------------------
subparser_remove_contam = subparsers.add_parser(
    "remove_contam",
    help="Remove contaminated reads from SAM or BAM",
    usage="clockwork remove_contam [options] <ref seq metadata tsv> <bam file> <counts outfile> <reads_out_1> <reads_out_2>",
    description="(SAM or BAM) -> paired FASTQ files split into OK, contaminated, and unmapped",
)

subparser_remove_contam.add_argument(
    "--no_match_out_1",
    help="Name of output file 1 of reads that did not match. If not given, reads are included in reads_out_1. Must be used with --no_match_out_2",
)
subparser_remove_contam.add_argument(
    "--no_match_out_2",
    help="Name of output file 2 of reads that did not match. If not given, reads are included in reads_out_2. Must be used with --no_match_out_1",
)
subparser_remove_contam.add_argument(
    "--contam_out_1",
    help="Name of output file 1 of contamination reads. If not given, reads are discarded. Must be used with --contam_out_2",
)
subparser_remove_contam.add_argument(
    "--contam_out_2",
    help="Name of output file 2 of contamination reads. If not given, reads are discarded. Must be used with --contam_out_1",
)
subparser_remove_contam.add_argument(
    "--done_file", help="Write a file of the given name when the script is finished"
)
subparser_remove_contam.add_argument(
    "metadata_tsv",
    help="Metadata TSV file. Format: one group of ref seqs per line. Tab-delimited columns: 1) group name; 2) 1|0 for is|is not contamination; 3+) sequence names.",
)
subparser_remove_contam.add_argument("bam_in", help="Name of input bam file")
subparser_remove_contam.add_argument(
    "counts_out", help="Name of output file of read counts"
)
subparser_remove_contam.add_argument("reads_out_1", help="Name of output reads file 1")
subparser_remove_contam.add_argument("reads_out_2", help="Name of output reads file 2")
subparser_remove_contam.set_defaults(func=clockwork.contam_remover.run)

# ----------------------------- version -------------------------------
subparser_version = subparsers.add_parser(
    "version",
    help="Get version and exit",
    usage="clockwork version",
    description="Print version and exit",
)
subparser_version.set_defaults(func=lambda _: print(clockwork.__version__))

args = parser.parse_args()

logging.basicConfig(
    level=logging.INFO,
    format=f"[%(asctime)s - clockwork {args.subparser_name} - %(levelname)s] %(message)s",
    datefmt="%Y-%m-%dT%H:%M:%S",
)

if hasattr(args, "func"):
    args.func(args)
else:
    parser.print_help()
